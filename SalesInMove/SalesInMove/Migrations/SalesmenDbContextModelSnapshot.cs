// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SalesInMove.DatabaseRelated;

namespace SalesInMove.Migrations
{
    [DbContext(typeof(SalesmenDbContext))]
    partial class SalesmenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SalesInMove.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AnnualNettoIncome")
                        .HasColumnType("bigint");

                    b.Property<string[]>("EmployeeOpinions")
                        .HasColumnType("text[]");

                    b.Property<string>("Headquarter")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSalesman")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<long>("Registry")
                        .HasColumnType("bigint");

                    b.Property<bool>("SalesSupport")
                        .HasColumnType("boolean");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<long>("TaxNumber")
                        .HasMaxLength(11)
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("YearOfFoundation")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CompanyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 12,
                            AnnualNettoIncome = 2000321865L,
                            EmployeeOpinions = new[] { "Good", "Bad", "Terrific!", "Horrific!" },
                            Headquarter = "Halásztelek",
                            Name = "Markoó Kft.",
                            NumberOfSalesman = 10,
                            PositionId = 3,
                            Registry = 109321480L,
                            SalesSupport = true,
                            TaxNumber = 24767107243L,
                            UserId = "0",
                            YearOfFoundation = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SalesInMove.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("BossExpectations")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Expectations")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OtherBenefits")
                        .HasColumnType("text");

                    b.Property<bool>("ProgressionSupport")
                        .HasColumnType("boolean");

                    b.Property<string>("Wages")
                        .HasColumnType("text");

                    b.Property<string>("WorkHour")
                        .HasColumnType("text");

                    b.Property<int>("WorkHourRatioId")
                        .HasColumnType("integer");

                    b.HasKey("PositionId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WorkHourRatioId")
                        .IsUnique();

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            PositionId = 3,
                            BossExpectations = "Be good and reliable!",
                            City = "Halásztelek",
                            Description = "Good",
                            Name = "Sales manager",
                            OtherBenefits = "Laptop and car",
                            ProgressionSupport = true,
                            WorkHour = "Full",
                            WorkHourRatioId = 4
                        });
                });

            modelBuilder.Entity("SalesInMove.Models.WorkHourRatio", b =>
                {
                    b.Property<int>("WorkHourRatioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<byte>("DrivingHours")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomeOfficeHours")
                        .HasColumnType("smallint");

                    b.Property<byte>("OfficeHours")
                        .HasColumnType("smallint");

                    b.Property<int>("WorkHoursPerMonth")
                        .HasColumnType("integer");

                    b.HasKey("WorkHourRatioId");

                    b.ToTable("WorkHourRatio");

                    b.HasData(
                        new
                        {
                            WorkHourRatioId = 4,
                            DrivingHours = (byte)20,
                            HomeOfficeHours = (byte)100,
                            OfficeHours = (byte)64,
                            WorkHoursPerMonth = 184
                        });
                });

            modelBuilder.Entity("SalesInMove.Models.Account", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Eletkor")
                        .HasColumnType("integer");

                    b.Property<int>("ErtekesitoiForgalom")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("Jogositvany")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string[]>("Nyelvek")
                        .HasColumnType("text[]");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<bool>("SalesKurzusElofizetes")
                        .HasColumnType("boolean");

                    b.Property<string>("Szakterulet")
                        .HasColumnType("text");

                    b.Property<bool>("SzemelyisegTeszt")
                        .HasColumnType("boolean");

                    b.Property<string>("Varos")
                        .HasColumnType("text");

                    b.Property<string>("Vegzettseg")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Account");

                    b.HasData(
                        new
                        {
                            Id = "2fdb863b-66b3-4e11-94d0-5459e330f234",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b38c2c3c-0110-43f2-b937-10de10a437bf",
                            Email = "erzsebetchen@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b6d8560-392b-4522-91c8-6453a6d02b9e",
                            TwoFactorEnabled = false,
                            UserName = "Erzsebet Chen",
                            Eletkor = 28,
                            ErtekesitoiForgalom = 50000000,
                            Jogositvany = true,
                            Nyelvek = new[] { "kinai", "angol" },
                            Password = "erzsebetchen",
                            Picture = "https://images.generated.photos/iZOX8m9z2zgSg7_qWRSr4wBWJLfNkbdeofALD6dRIVU/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA1NDIxMzguanBn.jpg",
                            SalesKurzusElofizetes = true,
                            Szakterulet = "Sales specialist",
                            SzemelyisegTeszt = true,
                            Varos = "Budapest",
                            Vegzettseg = "Marketing BA"
                        },
                        new
                        {
                            Id = "98ba488d-f640-4974-9a9a-b4c2900a2fef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c332a34-4f0a-4cb1-806b-5208b096cb94",
                            Email = "marjoiretierney@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c7e0717-3982-4bcc-bd71-a8421fc6e37f",
                            TwoFactorEnabled = false,
                            UserName = "Marjorie Tierney",
                            Eletkor = 30,
                            ErtekesitoiForgalom = 30000000,
                            Jogositvany = true,
                            Nyelvek = new[] { "nemet", "angol" },
                            Password = "marjoiretierney",
                            Picture = "https://images.generated.photos/DThx55Jct9pbzh0tEWKAH9ilBwpKhHfPL0f0B6umGxU/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA4NDk3MjcuanBn.jpg",
                            SalesKurzusElofizetes = false,
                            Szakterulet = "Sales Support",
                            SzemelyisegTeszt = false,
                            Varos = "DunaHaraszti",
                            Vegzettseg = "Foiskola"
                        },
                        new
                        {
                            Id = "998f19bd-6923-4f20-b453-7dde21db3898",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b172f10d-d5ee-45ab-893e-f945c24818df",
                            Email = "maigriffiths@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "603d4961-5c26-47f8-8a54-fb294afbd052",
                            TwoFactorEnabled = false,
                            UserName = "Mai Griffits",
                            Eletkor = 34,
                            ErtekesitoiForgalom = 50000000,
                            Jogositvany = false,
                            Nyelvek = new[] { "nemet", "angol" },
                            Password = "maigriffiths",
                            Picture = "https://images.generated.photos/1k3lzxgEtWeS2mefKNXprUfn-kPpzyz3QJ0xuizOQrE/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA3NzkzMDkuanBn.jpg",
                            SalesKurzusElofizetes = true,
                            Szakterulet = "Sales adminisztracio",
                            SzemelyisegTeszt = false,
                            Varos = "Erd",
                            Vegzettseg = "egyetem"
                        },
                        new
                        {
                            Id = "683c3cc6-6e13-4d85-9e1e-ab5a31525fdc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "414bd55e-8e5f-4fb1-b904-0ec42e58169f",
                            Email = "joannemanning@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "805d13c6-a038-409e-a2ec-107ba9d263c3",
                            TwoFactorEnabled = false,
                            UserName = "Joanne Manning",
                            Eletkor = 20,
                            ErtekesitoiForgalom = 30000000,
                            Jogositvany = false,
                            Nyelvek = new[] { "kinai", "angol" },
                            Password = "joannemanning",
                            Picture = "https://images.generated.photos/jEnG00iXVCxYx24J4dFGMRWTkSaYGOR6-Igumi2VP3w/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA5Nzg0MzkuanBn.jpg",
                            SalesKurzusElofizetes = false,
                            Szakterulet = "Sales adminisztracio",
                            SzemelyisegTeszt = false,
                            Varos = "Budapest",
                            Vegzettseg = "egyetem"
                        },
                        new
                        {
                            Id = "ed42e67f-329c-4079-ab9c-64b1b622c73b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1586d44-6d89-4f0f-bfc5-87cc67522a67",
                            Email = "keaneboyd@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "90e490f9-ac3a-4918-8b2a-b00f3a3567f3",
                            TwoFactorEnabled = false,
                            UserName = "Keane Boyd",
                            Eletkor = 22,
                            ErtekesitoiForgalom = 40000000,
                            Jogositvany = false,
                            Nyelvek = new[] { "orosz", "angol" },
                            Password = "keaneboyd",
                            Picture = "https://images.generated.photos/GmWEUKjveqsM5x3TsJVABoSyjilRB6Tz2Z-Auc9p-8Y/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA2MTI4NTcuanBn.jpg",
                            SalesKurzusElofizetes = false,
                            Szakterulet = "Sales szaktanacsado",
                            SzemelyisegTeszt = true,
                            Varos = "Budapest",
                            Vegzettseg = "PhD"
                        },
                        new
                        {
                            Id = "7debd1a8-1c65-4cff-ae15-17b7f3f622b3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c51d7ca-ea82-4792-b830-1749fddf3c61",
                            Email = "aneekaeaton@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e8cdc6db-d602-4aa0-a55e-15b45ed1fa3e",
                            TwoFactorEnabled = false,
                            UserName = "Aneeka Eaton",
                            Eletkor = 34,
                            ErtekesitoiForgalom = 50000000,
                            Jogositvany = true,
                            Nyelvek = new[] { "angol" },
                            Password = "aneekaeaton",
                            Picture = "https://images.generated.photos/qvPRjAxXrZdLdgSDd6yk2I7ni0a1LAwFWZBNfvYNMdo/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA4MjM3ODkuanBn.jpg",
                            SalesKurzusElofizetes = true,
                            Szakterulet = "Sales specialist",
                            SzemelyisegTeszt = false,
                            Varos = "Kecsekemet",
                            Vegzettseg = "DLA"
                        },
                        new
                        {
                            Id = "76ee9c8d-0cd3-404b-822e-4bad9478dbfd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69e9cbb8-effa-4b2a-adc1-a06f5a637162",
                            Email = "bobacosta@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6bf92391-a085-462b-b30c-1a605a2f992c",
                            TwoFactorEnabled = false,
                            UserName = "Bob Acosta",
                            Eletkor = 30,
                            ErtekesitoiForgalom = 30000000,
                            Jogositvany = false,
                            Nyelvek = new[] { "angol" },
                            Password = "bobacosta",
                            Picture = "https://images.generated.photos/YFrGWaIDMHGU5HoB3GxLFJ_jXTE8S8gpstIs3Pm9dHE/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA3ODQ4MzYuanBn.jpg",
                            SalesKurzusElofizetes = true,
                            Szakterulet = "Sales Support",
                            SzemelyisegTeszt = false,
                            Varos = "Erd",
                            Vegzettseg = "Foiskola"
                        },
                        new
                        {
                            Id = "147d42f1-68f0-4252-a531-ecc37da34c0c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56862338-02b4-4867-ae09-0d96523b5ce5",
                            Email = "eoinlynn@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b48d6835-772d-4646-9d09-853201e297cb",
                            TwoFactorEnabled = false,
                            UserName = "Eoin Lynn",
                            Eletkor = 19,
                            ErtekesitoiForgalom = 40000000,
                            Jogositvany = true,
                            Nyelvek = new[] { "ukran", "angol" },
                            Password = "eoinlynn",
                            Picture = "https://images.generated.photos/aKjcATGNs_-Y5cyzeAdjL3N-cRWqUh7hKjds4pOytgw/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA2ODM0NDMuanBn.jpg",
                            SalesKurzusElofizetes = false,
                            Szakterulet = "Sales support",
                            SzemelyisegTeszt = true,
                            Varos = "Dunaharaszti",
                            Vegzettseg = "egyetem"
                        },
                        new
                        {
                            Id = "84bed6d9-4d39-48be-ab68-ec7d7489baef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "022e79c8-4524-4629-9949-b630400cad9c",
                            Email = "eoinlynn@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1918f8a0-15e0-42ad-aa17-9081fead90c0",
                            TwoFactorEnabled = false,
                            UserName = "Eoin Lynn",
                            Eletkor = 19,
                            ErtekesitoiForgalom = 40000000,
                            Jogositvany = true,
                            Nyelvek = new[] { "ukran", "angol" },
                            Password = "eoinlynn",
                            Picture = "https://images.generated.photos/aKjcATGNs_-Y5cyzeAdjL3N-cRWqUh7hKjds4pOytgw/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA2ODM0NDMuanBn.jpg",
                            SalesKurzusElofizetes = false,
                            Szakterulet = "Sales support",
                            SzemelyisegTeszt = true,
                            Varos = "Dunaharaszti",
                            Vegzettseg = "egyetem"
                        });
                });

            modelBuilder.Entity("SalesInMove.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("User_Password");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e595669-8e46-4e82-be88-e9e094d3c878",
                            Email = "marko@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab733887-e41e-4cc9-b259-0da913e0d902",
                            TwoFactorEnabled = false,
                            Password = "Asd123",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalesInMove.Models.Company", b =>
                {
                    b.HasOne("SalesInMove.Models.User", "User")
                        .WithOne("Company")
                        .HasForeignKey("SalesInMove.Models.Company", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesInMove.Models.Position", b =>
                {
                    b.HasOne("SalesInMove.Models.Company", "Company")
                        .WithMany("Positions")
                        .HasForeignKey("CompanyId");

                    b.HasOne("SalesInMove.Models.WorkHourRatio", "WorkHourRatio")
                        .WithOne("Position")
                        .HasForeignKey("SalesInMove.Models.Position", "WorkHourRatioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("WorkHourRatio");
                });

            modelBuilder.Entity("SalesInMove.Models.Company", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("SalesInMove.Models.WorkHourRatio", b =>
                {
                    b.Navigation("Position");
                });

            modelBuilder.Entity("SalesInMove.Models.User", b =>
                {
                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
