// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SalesInMove.DatabaseRelated;

namespace SalesInMove.Migrations
{
    [DbContext(typeof(SalesmenDbContext))]
    [Migration("20210210195211_DummiesCreated")]
    partial class DummiesCreated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SalesInMove.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AnnualNettoIncome")
                        .HasColumnType("bigint");

                    b.Property<string[]>("EmployeeOpinions")
                        .HasColumnType("text[]");

                    b.Property<string>("Headquarter")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfSalesman")
                        .HasColumnType("integer");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<long>("Registry")
                        .HasColumnType("bigint");

                    b.Property<bool>("SalesSupport")
                        .HasColumnType("boolean");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<long>("TaxNumber")
                        .HasMaxLength(11)
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("YearOfFoundation")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CompanyId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 12,
                            AnnualNettoIncome = 2000321865L,
                            EmployeeOpinions = new[] { "Good", "Bad", "Terrific!", "Horrific!" },
                            Headquarter = "Halásztelek",
                            Name = "Markoó Kft.",
                            NumberOfSalesman = 10,
                            PositionId = 3,
                            Registry = 109321480L,
                            SalesSupport = true,
                            TaxNumber = 24767107243L,
                            UserId = "0",
                            YearOfFoundation = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SalesInMove.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("BossExpectations")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Expectations")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OtherBenefits")
                        .HasColumnType("text");

                    b.Property<bool>("ProgressionSupport")
                        .HasColumnType("boolean");

                    b.Property<string>("Wages")
                        .HasColumnType("text");

                    b.Property<string>("WorkHour")
                        .HasColumnType("text");

                    b.Property<int>("WorkHourRatioId")
                        .HasColumnType("integer");

                    b.HasKey("PositionId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WorkHourRatioId")
                        .IsUnique();

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            PositionId = 3,
                            BossExpectations = "Be good and reliable!",
                            City = "Halásztelek",
                            Description = "Good",
                            Name = "Sales manager",
                            OtherBenefits = "Laptop and car",
                            ProgressionSupport = true,
                            WorkHour = "Full",
                            WorkHourRatioId = 4
                        });
                });

            modelBuilder.Entity("SalesInMove.Models.WorkHourRatio", b =>
                {
                    b.Property<int>("WorkHourRatioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<byte>("DrivingHours")
                        .HasColumnType("smallint");

                    b.Property<byte>("HomeOfficeHours")
                        .HasColumnType("smallint");

                    b.Property<byte>("OfficeHours")
                        .HasColumnType("smallint");

                    b.Property<int>("WorkHoursPerMonth")
                        .HasColumnType("integer");

                    b.HasKey("WorkHourRatioId");

                    b.ToTable("WorkHourRatio");

                    b.HasData(
                        new
                        {
                            WorkHourRatioId = 4,
                            DrivingHours = (byte)20,
                            HomeOfficeHours = (byte)100,
                            OfficeHours = (byte)64,
                            WorkHoursPerMonth = 184
                        });
                });

            modelBuilder.Entity("SalesInMove.Models.Account", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Eletkor")
                        .HasColumnType("integer");

                    b.Property<int>("ErtékesitoiForgalom")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("Jogositvany")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string[]>("Nyelvek")
                        .HasColumnType("text[]");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.Property<bool>("SalesKurzusElofizetes")
                        .HasColumnType("boolean");

                    b.Property<string>("Szakterulet")
                        .HasColumnType("text");

                    b.Property<bool>("SzemelyisegTeszt")
                        .HasColumnType("boolean");

                    b.Property<string>("Varos")
                        .HasColumnType("text");

                    b.Property<string>("Vegzettseg")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Account");

                    b.HasData(
                        new
                        {
                            Id = "d4ce3ca7-a539-4831-957e-083c0978b4c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f3332d6e-0515-4cfa-88d6-9c597fedc9f0",
                            Email = "erzsebetchen@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb9ed458-68b4-4af6-ba15-11b4201c3494",
                            TwoFactorEnabled = false,
                            UserName = "Erzsebet Chen",
                            Eletkor = 28,
                            ErtékesitoiForgalom = 50000000,
                            Jogositvany = true,
                            Nyelvek = new[] { "kinai", "angol" },
                            Password = "erzsebetchen",
                            Picture = "https://images.generated.photos/iZOX8m9z2zgSg7_qWRSr4wBWJLfNkbdeofALD6dRIVU/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA1NDIxMzguanBn.jpg",
                            SalesKurzusElofizetes = true,
                            Szakterulet = "Sales specialist",
                            SzemelyisegTeszt = true,
                            Varos = "Budapest",
                            Vegzettseg = "Marketing BA"
                        },
                        new
                        {
                            Id = "c62abf04-501b-4aed-92a9-cd047ccc8f4d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ea13d1db-c5a7-43b7-b7f0-358fcb673d48",
                            Email = "marjoiretierney@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47819e05-6e15-4efd-a75b-1ea59e3b82eb",
                            TwoFactorEnabled = false,
                            UserName = "Marjorie Tierney",
                            Eletkor = 30,
                            ErtékesitoiForgalom = 30000000,
                            Jogositvany = true,
                            Nyelvek = new[] { "nemet", "angol" },
                            Password = "marjoiretierney",
                            Picture = "https://images.generated.photos/DThx55Jct9pbzh0tEWKAH9ilBwpKhHfPL0f0B6umGxU/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA4NDk3MjcuanBn.jpg",
                            SalesKurzusElofizetes = false,
                            Szakterulet = "Sales Support",
                            SzemelyisegTeszt = false,
                            Varos = "DunaHaraszti",
                            Vegzettseg = "Foiskola"
                        },
                        new
                        {
                            Id = "d3c94edf-8957-41a3-b502-7f4de5723e75",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "46967a4f-893e-47fc-81f6-457cc3bc9584",
                            Email = "maigriffiths@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f27c53bb-93ae-4113-9805-0ac77b7bc62b",
                            TwoFactorEnabled = false,
                            UserName = "Mai Griffits",
                            Eletkor = 34,
                            ErtékesitoiForgalom = 50000000,
                            Jogositvany = false,
                            Nyelvek = new[] { "nemet", "angol" },
                            Password = "maigriffiths",
                            Picture = "https://images.generated.photos/1k3lzxgEtWeS2mefKNXprUfn-kPpzyz3QJ0xuizOQrE/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA3NzkzMDkuanBn.jpg",
                            SalesKurzusElofizetes = true,
                            Szakterulet = "Sales adminisztracio",
                            SzemelyisegTeszt = false,
                            Varos = "Erd",
                            Vegzettseg = "egyetem"
                        },
                        new
                        {
                            Id = "33ef471b-6b19-4320-b344-72495dba98ea",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ecf5cfa1-f181-4464-ba69-dcc6201a3d82",
                            Email = "joannemanning@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7ff958b-aadd-43d5-86c8-d1bba936b802",
                            TwoFactorEnabled = false,
                            UserName = "Joanne Manning",
                            Eletkor = 20,
                            ErtékesitoiForgalom = 30000000,
                            Jogositvany = false,
                            Nyelvek = new[] { "kinai", "angol" },
                            Password = "joannemanning",
                            Picture = "https://images.generated.photos/jEnG00iXVCxYx24J4dFGMRWTkSaYGOR6-Igumi2VP3w/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA5Nzg0MzkuanBn.jpg",
                            SalesKurzusElofizetes = false,
                            Szakterulet = "Sales adminisztracio",
                            SzemelyisegTeszt = false,
                            Varos = "Budapest",
                            Vegzettseg = "egyetem"
                        },
                        new
                        {
                            Id = "aa8ffda2-1da3-4d21-a276-6b16aaec41e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "daab6860-28b3-40c7-b083-ab2afc91713f",
                            Email = "keaneboyd@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c3baf0e1-db55-4ee1-b983-c63bd2f45a1f",
                            TwoFactorEnabled = false,
                            UserName = "Keane Boyd",
                            Eletkor = 22,
                            ErtékesitoiForgalom = 40000000,
                            Jogositvany = false,
                            Nyelvek = new[] { "orosz", "angol" },
                            Password = "keaneboyd",
                            Picture = "https://images.generated.photos/GmWEUKjveqsM5x3TsJVABoSyjilRB6Tz2Z-Auc9p-8Y/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA2MTI4NTcuanBn.jpg",
                            SalesKurzusElofizetes = false,
                            Szakterulet = "Sales szaktanacsado",
                            SzemelyisegTeszt = true,
                            Varos = "Budapest",
                            Vegzettseg = "PhD"
                        },
                        new
                        {
                            Id = "127cc818-4212-42a1-a2c2-b887a10a3bca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ce5e00a-a1c1-48bd-89cb-76896f72e539",
                            Email = "aneekaeaton@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c590113e-bc77-49ac-a5b5-50279c5786a2",
                            TwoFactorEnabled = false,
                            UserName = "Aneeka Eaton",
                            Eletkor = 34,
                            ErtékesitoiForgalom = 50000000,
                            Jogositvany = true,
                            Nyelvek = new[] { "angol" },
                            Password = "aneekaeaton",
                            Picture = "https://images.generated.photos/qvPRjAxXrZdLdgSDd6yk2I7ni0a1LAwFWZBNfvYNMdo/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA4MjM3ODkuanBn.jpg",
                            SalesKurzusElofizetes = true,
                            Szakterulet = "Sales specialist",
                            SzemelyisegTeszt = false,
                            Varos = "Kecsekemet",
                            Vegzettseg = "DLA"
                        },
                        new
                        {
                            Id = "f10f9596-f3f3-42c7-98ae-e297c81c353e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "574858e7-d34b-4f51-9bbe-722e2a49743c",
                            Email = "bobacosta@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e490662c-4071-4996-9d42-0671ab79dccb",
                            TwoFactorEnabled = false,
                            UserName = "Bob Acosta",
                            Eletkor = 30,
                            ErtékesitoiForgalom = 30000000,
                            Jogositvany = false,
                            Nyelvek = new[] { "angol" },
                            Password = "bobacosta",
                            Picture = "https://images.generated.photos/YFrGWaIDMHGU5HoB3GxLFJ_jXTE8S8gpstIs3Pm9dHE/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA3ODQ4MzYuanBn.jpg",
                            SalesKurzusElofizetes = true,
                            Szakterulet = "Sales Support",
                            SzemelyisegTeszt = false,
                            Varos = "Erd",
                            Vegzettseg = "Foiskola"
                        },
                        new
                        {
                            Id = "a072e6be-bebf-42ef-97ac-e4433d3afad8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2ff7f77-5e30-4cbb-b981-a967a095f7fb",
                            Email = "eoinlynn@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7da53e18-a1e1-459b-8bfe-99047ae38a67",
                            TwoFactorEnabled = false,
                            UserName = "Eoin Lynn",
                            Eletkor = 19,
                            ErtékesitoiForgalom = 40000000,
                            Jogositvany = true,
                            Nyelvek = new[] { "ukran", "angol" },
                            Password = "eoinlynn",
                            Picture = "https://images.generated.photos/aKjcATGNs_-Y5cyzeAdjL3N-cRWqUh7hKjds4pOytgw/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA2ODM0NDMuanBn.jpg",
                            SalesKurzusElofizetes = false,
                            Szakterulet = "Sales support",
                            SzemelyisegTeszt = true,
                            Varos = "Dunaharaszti",
                            Vegzettseg = "egyetem"
                        },
                        new
                        {
                            Id = "d32c9bce-0b33-45ac-ab62-c468ffed9c07",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ff91a733-3b2b-4b1c-ad8b-6b9caca56020",
                            Email = "eoinlynn@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6c52a29-bc4f-4bc8-9b50-6420057d1f57",
                            TwoFactorEnabled = false,
                            UserName = "Eoin Lynn",
                            Eletkor = 19,
                            ErtékesitoiForgalom = 40000000,
                            Jogositvany = true,
                            Nyelvek = new[] { "ukran", "angol" },
                            Password = "eoinlynn",
                            Picture = "https://images.generated.photos/aKjcATGNs_-Y5cyzeAdjL3N-cRWqUh7hKjds4pOytgw/rs:fit:512:512/wm:0.95:sowe:18:18:0.33/Z3M6Ly9nZW5lcmF0/ZWQtcGhvdG9zL3Yz/XzA2ODM0NDMuanBn.jpg",
                            SalesKurzusElofizetes = false,
                            Szakterulet = "Sales support",
                            SzemelyisegTeszt = true,
                            Varos = "Dunaharaszti",
                            Vegzettseg = "egyetem"
                        });
                });

            modelBuilder.Entity("SalesInMove.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("User_Password");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa2e1a96-cc22-4dcb-b246-6bed69bc2aae",
                            Email = "marko@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db87ac3c-ad51-4d26-b84e-42d6addcc3af",
                            TwoFactorEnabled = false,
                            Password = "Asd123",
                            UserType = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalesInMove.Models.Company", b =>
                {
                    b.HasOne("SalesInMove.Models.User", "User")
                        .WithOne("Company")
                        .HasForeignKey("SalesInMove.Models.Company", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesInMove.Models.Position", b =>
                {
                    b.HasOne("SalesInMove.Models.Company", "Company")
                        .WithMany("Positions")
                        .HasForeignKey("CompanyId");

                    b.HasOne("SalesInMove.Models.WorkHourRatio", "WorkHourRatio")
                        .WithOne("Position")
                        .HasForeignKey("SalesInMove.Models.Position", "WorkHourRatioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("WorkHourRatio");
                });

            modelBuilder.Entity("SalesInMove.Models.Company", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("SalesInMove.Models.WorkHourRatio", b =>
                {
                    b.Navigation("Position");
                });

            modelBuilder.Entity("SalesInMove.Models.User", b =>
                {
                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
